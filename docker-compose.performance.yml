# Docker Compose configuration optimized for performance
# This extends the base docker-compose.yml with performance optimizations

version: "3.8"

services:
  # Backend service with performance optimizations
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - MAVEN_OPTS=-Xmx2g -XX:+UseG1GC -XX:+UseStringDeduplication
    environment:
      # JVM Performance Settings
      - JAVA_OPTS=-Xms1g -Xmx2g -XX:+UseG1GC -XX:+UseStringDeduplication -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+UseZGC

      # Database Connection Pool Optimization
      - DB_MAX_POOL_SIZE=50
      - DB_MIN_IDLE=10
      - DB_CONNECTION_TIMEOUT=30000
      - DB_MAX_LIFETIME=1800000
      - DB_LEAK_DETECTION=60000

      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_POOL_MAX_ACTIVE=20
      - REDIS_POOL_MAX_IDLE=8
      - REDIS_POOL_MIN_IDLE=2

      # Cache Configuration
      - CACHE_REDIS_ENABLED=true
      - CACHE_CAFFEINE_ENABLED=true
      - CACHE_TTL_CONTESTS=3600
      - CACHE_TTL_PROBLEMS=7200
      - CACHE_TTL_LEADERBOARD=300
      - CACHE_TTL_USERS=1800
      - CACHE_TTL_TEST_CASES=14400

      # Async Processing Optimization
      - ASYNC_SUBMISSION_CORE_POOL=12
      - ASYNC_SUBMISSION_MAX_POOL=30
      - ASYNC_SUBMISSION_QUEUE=300
      - ASYNC_TASK_CORE_POOL=4
      - ASYNC_TASK_MAX_POOL=12
      - ASYNC_TASK_QUEUE=100

      # Judge System Performance
      - JUDGE_CPU_LIMIT=2.0
      - JUDGE_MEMORY_LIMIT=1024m
      - JUDGE_PARALLEL_EXECUTIONS=15
      - JUDGE_CLEANUP_INTERVAL=180

      # Monitoring
      - MONITORING_ENABLED=true
      - METRICS_ENABLED=true
      - METRICS_EXPORT_INTERVAL=30

      # Server Performance
      - TOMCAT_MAX_CONNECTIONS=10000
      - TOMCAT_MAX_THREADS=300
      - TOMCAT_MIN_SPARE_THREADS=15
      - COMPRESSION_ENABLED=true
      - HTTP2_ENABLED=true

    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 3G
        reservations:
          cpus: "1.0"
          memory: 2G

    # Performance-optimized volume mounts
    volumes:
      - /tmp/judge:/tmp/judge:rw,noatime
      - backend_logs:/app/logs:rw,noatime

    # Network optimizations
    networks:
      - contest-network

    # Health check optimization
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend service with performance optimizations
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
        - NEXT_TELEMETRY_DISABLED=1
        - ANALYZE=false
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8080/api
      - NEXT_PUBLIC_SW_ENABLED=true
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M

    # Optimized volume mounts
    volumes:
      - frontend_cache:/app/.next/cache:rw,noatime

    networks:
      - contest-network

    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL with performance optimizations
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=coding_contest_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      # Performance tuning
      - POSTGRES_INITDB_ARGS=--data-checksums
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=8
      -c max_parallel_workers_per_gather=4
      -c max_parallel_workers=8
      -c max_parallel_maintenance_workers=4
      -c log_min_duration_statement=1000
      -c log_checkpoints=on
      -c log_connections=on
      -c log_disconnections=on
      -c log_lock_waits=on
      -c log_temp_files=0
      -c track_activity_query_size=2048
      -c track_io_timing=on

    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 2G
        reservations:
          cpus: "0.5"
          memory: 512M

    volumes:
      - postgres_data:/var/lib/postgresql/data:rw,noatime
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro

    networks:
      - contest-network

    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis with performance optimizations
  redis:
    image: redis:7-alpine
    command: >
      redis-server
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 300
      --timeout 0
      --tcp-backlog 511
      --databases 16
      --rdbcompression yes
      --rdbchecksum yes
      --appendonly yes
      --appendfsync everysec
      --no-appendfsync-on-rewrite no
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
      --aof-load-truncated yes
      --lazyfree-lazy-eviction yes
      --lazyfree-lazy-expire yes
      --lazyfree-lazy-server-del yes

    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.25"
          memory: 256M

    volumes:
      - redis_data:/data:rw,noatime

    networks:
      - contest-network

    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx with performance optimizations
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.performance.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx:rw,noatime

    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 128M

    networks:
      - contest-network

    depends_on:
      - frontend
      - backend

    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus:rw,noatime
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=7d"
      - "--storage.tsdb.retention.size=1GB"
      - "--web.enable-lifecycle"

    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.1"
          memory: 128M

    networks:
      - contest-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana:rw,noatime
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro

    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.1"
          memory: 128M

    networks:
      - contest-network

# Optimized volumes
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind,noatime
      device: ./data/postgres

  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind,noatime
      device: ./data/redis

  backend_logs:
    driver: local
    driver_opts:
      type: none
      o: bind,noatime
      device: ./logs/backend

  frontend_cache:
    driver: local
    driver_opts:
      type: none
      o: bind,noatime
      device: ./cache/frontend

  nginx_cache:
    driver: local
    driver_opts:
      type: none
      o: bind,noatime
      device: ./cache/nginx

  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind,noatime
      device: ./data/prometheus

  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind,noatime
      device: ./data/grafana

# Optimized network
networks:
  contest-network:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1500
    ipam:
      config:
        - subnet: 172.20.0.0/16
