name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: "0 2 * * *"

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: coding_contest_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run backend unit tests
        working-directory: ./backend
        run: mvn clean test

      - name: Run backend integration tests
        working-directory: ./backend
        run: mvn clean test -Dtest="**/*IntegrationTest"
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: coding_contest_test
          DB_USERNAME: postgres
          DB_PASSWORD: postgres

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Backend Tests
          path: backend/target/surefire-reports/*.xml
          reporter: java-junit

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-test-results
          path: backend/target/surefire-reports/

      - name: SonarCloud Scan
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: backend

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run linting
        working-directory: ./frontend
        run: npm run lint

      - name: Run type checking
        working-directory: ./frontend
        run: npm run type-check

      - name: Run unit tests
        working-directory: ./frontend
        run: npm test -- --coverage --watchAll=false

      - name: Run integration tests
        working-directory: ./frontend
        run: npm run test:integration

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: frontend-test-results
          path: |
            frontend/coverage/
            frontend/test-results/

      - name: SonarCloud Scan
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: frontend

  # E2E Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps

      - name: Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d --build
          sleep 60  # Wait for services to be ready

      - name: Wait for services
        run: |
          timeout 300 bash -c 'until curl -f http://localhost:8080/api/health; do sleep 5; done'
          timeout 300 bash -c 'until curl -f http://localhost:3000; do sleep 5; done'

      - name: Run Playwright tests
        working-directory: ./frontend
        run: npm run test:e2e

      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/

      - name: Stop services
        if: always()
        run: docker-compose down -v

  # Docker Integration Tests
  docker-integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Docker integration test dependencies
        working-directory: ./docker-integration-tests
        run: |
          pip install -r requirements.txt

      - name: Build Docker images
        run: |
          docker build -t backend:test ./backend
          docker build -t frontend:test ./frontend
          docker build -t judge-executor:test ./docker/code-executor

      - name: Run Docker integration tests
        working-directory: ./docker-integration-tests
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 120  # Wait for all services to be ready
          python run_integration_tests.py

      - name: Upload Docker test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: docker-integration-results
          path: docker-integration-tests/results/

      - name: Cleanup Docker resources
        if: always()
        working-directory: ./docker-integration-tests
        run: |
          docker-compose -f docker-compose.test.yml down -v
          docker system prune -f

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Docker Scout vulnerability scan
        uses: docker/scout-action@v1
        with:
          command: cves
          image: local://backend:test
          only-severities: critical,high
          write-comment: false

  # Build and Deploy
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, docker-integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/contest-platform-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/contest-platform-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/contest-platform-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/contest-platform-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push judge executor image
        uses: docker/build-push-action@v5
        with:
          context: ./docker/code-executor
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/contest-platform-judge:latest
            ${{ secrets.DOCKER_USERNAME }}/contest-platform-judge:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to staging
        if: success()
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment commands here
          # For example, updating Kubernetes deployments, AWS ECS, etc.

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install performance test dependencies
        run: |
          pip install locust requests psutil

      - name: Run performance tests against staging
        run: |
          # Run performance tests against deployed staging environment
          echo "Running performance tests..."
          # Add your performance test commands here

      - name: Upload performance test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: performance-results/

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [build-and-deploy, performance-tests]
    if: always()

    steps:
      - name: Notify Slack on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: "#deployments"
          text: "✅ Deployment successful! All tests passed."
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: "#deployments"
          text: "❌ Deployment failed! Check the logs for details."
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
