name: Pull Request Validation

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Code Quality Checks
  code-quality:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for better analysis

      - name: Set up JDK 17 for backend
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Set up Node.js for frontend
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run backend linting (Checkstyle)
        working-directory: ./backend
        run: mvn checkstyle:check

      - name: Run frontend linting
        working-directory: ./frontend
        run: npm run lint

      - name: Run frontend type checking
        working-directory: ./frontend
        run: npm run type-check

      - name: Check code formatting (Prettier)
        working-directory: ./frontend
        run: npx prettier --check .

  # Fast Tests (Unit Tests)
  fast-tests:
    runs-on: ubuntu-latest
    needs: code-quality

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: coding_contest_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run backend unit tests
        working-directory: ./backend
        run: mvn clean test -Dtest="!**/*IntegrationTest"

      - name: Run frontend unit tests
        working-directory: ./frontend
        run: npm test -- --coverage --watchAll=false --testPathIgnorePatterns=integration

      - name: Upload backend test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-unit-test-results
          path: backend/target/surefire-reports/

      - name: Upload frontend test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: frontend-unit-test-results
          path: frontend/coverage/

  # Integration Tests (Slower)
  integration-tests:
    runs-on: ubuntu-latest
    needs: fast-tests
    if: github.event.pull_request.draft == false

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: coding_contest_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run backend integration tests
        working-directory: ./backend
        run: mvn clean test -Dtest="**/*IntegrationTest"
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: coding_contest_test
          DB_USERNAME: postgres
          DB_PASSWORD: postgres

      - name: Run frontend integration tests
        working-directory: ./frontend
        run: npm run test:integration

      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: |
            backend/target/surefire-reports/
            frontend/test-results/

  # Build Validation
  build-validation:
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build backend
        working-directory: ./backend
        run: mvn clean package -DskipTests

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Test Docker builds
        run: |
          docker build -t backend:pr-test ./backend
          docker build -t frontend:pr-test ./frontend
          docker build -t judge-executor:pr-test ./docker/code-executor

  # Security Checks
  security-checks:
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "table"
          exit-code: "1"
          severity: "CRITICAL,HIGH"

      - name: Run npm audit
        working-directory: ./frontend
        run: npm audit --audit-level=high

      - name: Check for secrets with GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Dependency Check
  dependency-check:
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Check for outdated dependencies (Backend)
        working-directory: ./backend
        run: mvn versions:display-dependency-updates

      - name: Check for outdated dependencies (Frontend)
        working-directory: ./frontend
        run: npm outdated || true

      - name: License compliance check
        working-directory: ./backend
        run: mvn license:check

  # Performance Impact Analysis
  performance-impact:
    runs-on: ubuntu-latest
    needs: [fast-tests, build-validation]
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout base branch
        run: git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build current branch
        working-directory: ./frontend
        run: npm run build

      - name: Analyze bundle size
        working-directory: ./frontend
        run: |
          npx bundlewatch --config bundlewatch.config.js || echo "Bundle size analysis completed"

  # Comment on PR with results
  pr-comment:
    runs-on: ubuntu-latest
    needs: [fast-tests, integration-tests, build-validation, security-checks]
    if: always() && github.event.pull_request.number

    steps:
      - name: Download test artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: Comment PR with test results
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            let comment = '## 🚀 Pull Request Validation Results\n\n';

            // Check job statuses
            const jobs = [
              { name: 'Code Quality', status: '${{ needs.code-quality.result }}' },
              { name: 'Fast Tests', status: '${{ needs.fast-tests.result }}' },
              { name: 'Integration Tests', status: '${{ needs.integration-tests.result }}' },
              { name: 'Build Validation', status: '${{ needs.build-validation.result }}' },
              { name: 'Security Checks', status: '${{ needs.security-checks.result }}' }
            ];

            jobs.forEach(job => {
              const emoji = job.status === 'success' ? '✅' : 
                           job.status === 'failure' ? '❌' : 
                           job.status === 'skipped' ? '⏭️' : '⏳';
              comment += `${emoji} **${job.name}**: ${job.status}\n`;
            });

            comment += '\n### 📊 Test Summary\n';

            // Add test coverage information if available
            try {
              const coverageFiles = fs.readdirSync('./artifacts').filter(f => f.includes('coverage'));
              if (coverageFiles.length > 0) {
                comment += '- Test coverage reports generated\n';
              }
            } catch (e) {
              // Artifacts may not be available
            }

            comment += '\n---\n*This comment was automatically generated by the CI/CD pipeline.*';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Auto-merge for dependabot PRs
  auto-merge:
    runs-on: ubuntu-latest
    needs: [fast-tests, integration-tests, build-validation, security-checks]
    if: |
      github.actor == 'dependabot[bot]' &&
      needs.fast-tests.result == 'success' &&
      needs.integration-tests.result == 'success' &&
      needs.build-validation.result == 'success' &&
      needs.security-checks.result == 'success'

    steps:
      - name: Enable auto-merge for Dependabot PRs
        run: gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
